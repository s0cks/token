#include <thread>#include "pool.h"#include "server.h"#include "discovery.h"#include "blockchain.h"#include "configuration.h"#include "job/scheduler.h"#include "peer/peer_session_manager.h"#ifdef TOKEN_ENABLE_HEALTHCHECK  #include "http/healthcheck_service.h"#endif//TOKEN_ENABLE_HEALTHCHECK#ifdef TOKEN_ENABLE_REST  #include "http/rest_service.h"#endif//TOKEN_ENABLE_RESTstatic inline voidInitializeLogging(char *arg0){  using namespace Token;  google::LogToStderr();  google::InitGoogleLogging(arg0);}static inline voidPrintBanner(){  // Print Debug Banner in Logs  std::string header = "Token v" + Token::GetVersion() + " Debug Mode Enabled!";  size_t total_size = 50;  size_t middle = (total_size - header.size()) / 2;  std::stringstream ss1;  for(size_t idx = 0; idx < total_size; idx++) ss1 << "#";  std::stringstream ss2;  ss2 << "#";  for(size_t idx = 0; idx < middle; idx++) ss2 << " ";  ss2 << header;  for(size_t idx = 0; idx < middle - 1; idx++) ss2 << " ";  ss2 << "#";  LOG(INFO) << ss1.str();  LOG(INFO) << ss2.str();  LOG(INFO) << ss1.str();}static inline boolAppendDummy(){  using namespace Token;  sleep(5);  LOG(INFO) << "getting unclaimed transactions";  HashList utxos;  if(!ObjectPool::GetUnclaimedTransactions(utxos)){    LOG(ERROR) << "couldn't get unclaimed transactions for";    return false;  }  LOG(INFO) << "spending " << utxos.size() << " unclaimed transactions";  int64_t idx = 0;  for(auto &it : utxos){    LOG(INFO) << "spending token: " << it;    UnclaimedTransactionPtr utxo = ObjectPool::GetUnclaimedTransaction(it);    InputList inputs = {        Input(utxo->GetTransaction(), utxo->GetIndex(), utxo->GetUser())    };    OutputList outputs = {        Output("TestUser2", "TestToken2")    };    TransactionPtr tx = std::make_shared<Transaction>(idx++, inputs, outputs);    ObjectPool::PutObject(tx->GetHash(), tx);    sleep(2);    if(idx == 2) break;  }  return true;}//TODO:// - create global environment teardown and deconstruct routines// - validity/consistency checks on block chain data// - safer/better shutdown/terminate routinesintmain(int argc, char **argv){  using namespace Token;  // Install Signal Handlers  SignalHandlers::Initialize();  // Parse Command Line Arguments  gflags::ParseCommandLineFlags(&argc, &argv, true);  // Initialize the Logging Framework  InitializeLogging(argv[0]);#ifdef TOKEN_DEBUG  PrintBanner();#endif//TOKEN_DEBUG  if(!BlockChainConfiguration::Initialize()){    LOG(ERROR) << "couldn't load the block chain configuration.";    return EXIT_FAILURE;  }  #ifdef TOKEN_ENABLE_HEALTHCHECK  HealthCheckService::Start();  #endif//TOKEN_ENABLE_HEALTHCHECK  JobScheduler::Initialize();  BlockChain::Initialize();  Server::Start();  PeerSessionManager::Initialize();  BlockDiscoveryThread::Start();  #ifdef TOKEN_ENABLE_REST  RestService::Start();  #endif//TOKEN_ENABLE_REST  #ifdef TOKEN_DEBUG  LOG(INFO) << "Number of Objects: " << ObjectPool::GetNumberOfObjects();  LOG(INFO) << "Number of Blocks: " << ObjectPool::GetNumberOfBlocks();  LOG(INFO) << "Number of Unclaimed Transactions: " << ObjectPool::GetNumberOfUnclaimedTransactions();  #endif//TOKEN_DEBUG  return EXIT_SUCCESS;}